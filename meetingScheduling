from flask import Flask, request, render_template, send_file
import boto3
from botocore.exceptions import ClientError
from urllib.parse import urlparse, unquote
import os

app = Flask(__name__)

# Directory to store downloaded files
os.makedirs("downloaded_files", exist_ok=True)

# Read AWS credentials from environment variables
aws_access_key_id = os.getenv('AWS_ACCESS_KEY_ID')
aws_secret_access_key = os.getenv('AWS_SECRET_ACCESS_KEY')
aws_region = os.getenv('AWS_DEFAULT_REGION')

# Initialize S3 client with credentials from environment variables
s3_client = boto3.client(
    's3',
    aws_access_key_id=aws_access_key_id,
    aws_secret_access_key=aws_secret_access_key,
    region_name=aws_region
)

def download_pdf_from_s3(url, bucket_name, output_file):
    """
    Download a PDF from S3 using its URL.
    """
    try:
        # Parse the URL to get the key
        parsed_url = urlparse(url)
        key = unquote(parsed_url.path.lstrip('/'))  # Extract and decode the key

        # Check if the object exists in S3
        s3_client.head_object(Bucket=bucket_name, Key=key)
        print(f"File exists in S3: {key}")

        # Download the file
        s3_client.download_file(Bucket=bucket_name, Key=key, Filename=output_file)
        print(f"File downloaded successfully: {output_file}")

        return output_file

    except ClientError as e:
        print(f"Error fetching file from S3: {e}")
        return None


@app.route('/', methods=['GET', 'POST'])
def index():
    """
    Renders a form to input the S3 URL and handles PDF downloading.
    """
    if request.method == 'POST':
        s3_url = request.form.get('s3_url')
        bucket_name = request.form.get('bucket_name')  # Get the bucket name
        output_file = os.path.join("downloaded_files", "downloaded_file.pdf")

        if not s3_url or not bucket_name:
            return render_template("meetings.html", error="Please provide both the URL and bucket name.")

        # Download the file
        local_file = download_pdf_from_s3(s3_url, bucket_name, output_file)

        if local_file:
            return send_file(local_file, as_attachment=True, download_name="file.pdf", mimetype="application/pdf")
        else:
            return render_template("meetings.html", error="Could not fetch the file. Please check the URL or bucket name.")

    return render_template("meetings.html")

if __name__ == "__main__":
    app.run(debug=True)
